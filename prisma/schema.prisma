generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AppliedPatches {
  patch_id   Int     @id @default(autoincrement())
  patch_hash String?

  @@map("applied_patches")
}

model ChroniclerHashGameEvent {
  chronicler_hash_game_event_id Int        @id @default(autoincrement())
  update_hash                   String?
  game_event_id                 Int?
  game_events                   GameEvent? @relation(fields: [game_event_id], references: [id])

  @@index([game_event_id], name: "chronicler_hash_game_event_indx_game_event_id")
  @@map("chronicler_hash_game_event")
}

model ChroniclerMeta {
  id               Int       @id
  season           Float
  day              Float
  game_timestamp   DateTime?
  team_timestamp   DateTime?
  player_timestamp DateTime?

  @@map("chronicler_meta")
}

model GameEventBaseRunner {
  id                     Int        @id @default(autoincrement())
  game_event_id          Int?
  runner_id              String?
  responsible_pitcher_id String?
  base_before_play       Int?
  base_after_play        Int?
  was_base_stolen        Boolean?
  was_caught_stealing    Boolean?
  was_picked_off         Boolean?
  runner_scored          Boolean?   @default(false)
  runs_scored            Float?
  game_events            GameEvent? @relation(fields: [game_event_id], references: [id])

  @@map("game_event_base_runners")
}

model GameEvent {
  id                                 Int                       @id @default(autoincrement())
  perceived_at                       DateTime?
  game_id                            String?
  event_type                         String?
  event_index                        Int?
  inning                             Int?
  top_of_inning                      Boolean?
  outs_before_play                   Int?
  batter_id                          String?
  batter_team_id                     String?
  pitcher_id                         String?
  pitcher_team_id                    String?
  home_score                         Float?
  away_score                         Float?
  home_strike_count                  Int?                      @default(3)
  away_strike_count                  Int?                      @default(3)
  batter_count                       Int?
  pitches                            String[]
  total_strikes                      Int?
  total_balls                        Int?
  total_fouls                        Int?
  is_leadoff                         Boolean?
  is_pinch_hit                       Boolean?
  lineup_position                    Int?
  is_last_event_for_plate_appearance Boolean?
  bases_hit                          Int?
  runs_batted_in                     Float?
  is_sacrifice_hit                   Boolean?
  is_sacrifice_fly                   Boolean?
  outs_on_play                       Int?
  is_double_play                     Boolean?
  is_triple_play                     Boolean?
  is_wild_pitch                      Boolean?
  batted_ball_type                   String?
  is_bunt                            Boolean?
  errors_on_play                     Int?
  batter_base_after_play             Int?
  is_last_game_event                 Boolean?
  event_text                         String[]
  additional_context                 String?
  season                             Int?
  day                                Int?
  parsing_error                      Boolean?
  parsing_error_list                 String[]
  fixed_error                        Boolean?
  fixed_error_list                   String[]
  home_ball_count                    Int?                      @default(4)
  away_ball_count                    Int?                      @default(4)
  away_base_count                    Int?                      @default(4)
  home_base_count                    Int?                      @default(4)
  tournament                         Int?
  games                              Game?                     @relation(fields: [game_id], references: [game_id])
  chronicler_hash_game_event         ChroniclerHashGameEvent[]
  game_event_base_runners            GameEventBaseRunner[]
  outcomes                           Outcome[]

  @@unique([game_id, event_index], name: "no_dupes")
  @@index([event_type], name: "game_events_indx_event_type")
  @@index([game_id], name: "game_events_indx_game_id")
  @@map("game_events")
}

model Game {
  game_id                String      @id
  day                    Int
  season                 Int
  tournament             Int
  last_game_event        Int?
  home_odds              Float?
  away_odds              Float?
  weather                Int?
  series_index           Int?
  series_length          Int?
  is_postseason          Boolean?
  home_team              String?
  away_team              String?
  home_score             Float?
  away_score             Float?
  number_of_innings      Int?
  ended_on_top_of_inning Boolean?
  ended_in_shame         Boolean?
  terminology_id         String?
  rules_id               String?
  statsheet_id           String?
  winning_pitcher_id     String?
  losing_pitcher_id      String?
  game_events            GameEvent[]

  @@map("games")
}

model ImportedLog {
  id          Int       @id @default(autoincrement())
  key         String?
  imported_at DateTime?

  @@map("imported_logs")
}

model Outcome {
  id            Int        @id @default(autoincrement())
  game_event_id Int?
  entity_id     String?
  event_type    String?
  original_text String?
  game_events   GameEvent? @relation(fields: [game_event_id], references: [id])

  @@map("outcomes")
}

model PlayerModification {
  player_modifications_id Int       @id @default(autoincrement())
  player_id               String?
  modification            String?
  valid_from              DateTime?
  valid_until             DateTime?

  @@index([player_id, valid_from, valid_until], name: "player_modifications_indx_player_id_timespan")
  @@map("player_modifications")
}

model TeamModification {
  team_modifications_id Int       @id @default(autoincrement())
  team_id               String?
  modification          String?
  valid_from            DateTime?
  valid_until           DateTime?

  @@map("team_modifications")
}

model TeamRoster {
  team_roster_id   Int       @id @default(autoincrement())
  team_id          String?
  position_id      Int?
  valid_from       DateTime?
  valid_until      DateTime?
  player_id        String?
  position_type_id Float?

  @@index([valid_until, team_id, position_id, position_type_id], name: "team_roster_idx")
  @@index([player_id, valid_from, valid_until], name: "team_roster_indx_player_id_timespan")
  @@map("team_roster")
}

model TimeMap {
  season      Int
  day         Int
  first_time  DateTime?
  time_map_id Int       @id @default(autoincrement())
  phase_id    Int?

  @@unique([season, day, phase_id], name: "season_day_unique")
  @@map("time_map")
}

// @View - Must be manually updated with every new Prisma introspection
model Player {
  player_id        String
  player_name      String?
  valid_from       DateTime
  valid_until      DateTime?
  deceased         Boolean?
  anticapitalism   Float?
  base_thirst      Float?
  buoyancy         Float?
  chasiness        Float?
  coldness         Float?
  continuation     Float?
  divinity         Float?
  ground_friction  Float?
  indulgence       Float?
  laserlikeness    Float?
  martyrdom        Float?
  moxie            Float?
  musclitude       Float?
  omniscience      Float?
  overpowerment    Float?
  patheticism      Float?
  ruthlessness     Float?
  shakespearianism Float?
  suppression      Float?
  tenaciousness    Float?
  thwackability    Float?
  tragicness       Float?
  unthwackability  Float?
  watchfulness     Float?
  pressurization   Float?
  cinnamon         Float?
  total_fingers    Int?
  soul             Int?
  fate             Int?
  peanut_allergy   Boolean?
  armor            String?
  bat              String?
  ritual           String?
  coffee           String?
  blood            String?
  url_slug         String?

  current_state        String?
  current_location     String?
  debut_gameday        Int?
  debut_season         Int?
  debut_tournament     Int?
  incineration_season  Int?
  incineration_gameday Int?
  incineration_phase   String?
  gameday_from         Int?
  season_from          Int?
  tournament_from      Int?
  phase_type_from      String?
  position_id          Int?
  position_type        String?
  team                 String?
  team_abbreviation    String?
  team_id              String?
  modifications        String[]
  baserunning_rating   Float?
  baserunning_stars    Float?
  batting_rating       Float?
  batting_stars        Float?
  defense_rating       Float?
  defense_stars        Float?
  pitching_rating      Float?
  pitching_stars       Float?

  @@id(fields: [player_id, valid_from])
  @@map("players_info_expanded_all")
}

// @View - Must be manually updated with every new Prisma introspection
model Team {
  team_id              String
  location             String
  nickname             String
  full_name            String
  team_abbreviation    String?
  url_slug             String
  current_team_status  String
  valid_from           DateTime
  valid_until          DateTime?
  gameday_from         Int?
  season_from          Int?
  division             String?
  division_id          String?
  league               String?
  league_id            String?
  tournament_name      String?
  modifications        String[]
  team_main_color      String?
  team_secondary_color String?
  team_slogan          String?
  team_emoji           String?

  PlayerBattingStatsSeason      PlayerBattingStatsSeason[]
  PlayerBattingStatsPostseason  PlayerBattingStatsPostseason[]
  PlayerPitchingStatsSeason     PlayerPitchingStatsSeason[]
  PlayerPitchingStatsPostseason PlayerPitchingStatsPostseason[]

  TeamBattingStatsSeason      TeamBattingStatsSeason[]
  TeamBattingStatsPostseason  TeamBattingStatsPostseason[]
  TeamPitchingStatsSeason     TeamPitchingStatsSeason[]
  TeamPitchingStatsPostseason TeamPitchingStatsPostseason[]

  @@id(fields: [team_id, valid_from])
  @@map("teams_info_expanded_all")
}

// @View - Must be manually updated with every new Prisma introspection
model CurrentTeamRoster {
  valid_from    DateTime
  gameday_from  Int
  season_from   Int
  team_id       String
  nickname      String
  player_id     String   @id
  player_name   String
  position_type String
  position_id   Int

  @@map("rosters_current")
}

// Batting Stats

// @View - Must be manually updated with every new Prisma introspection
model PlayerBattingStatsSeason {
  player_id            String
  player_name          String
  team_id              String
  team_valid_from      DateTime
  team_valid_until     DateTime?
  season               Int
  first_appearance     Int
  batting_average      Float?
  on_base_percentage   Float?
  slugging             Float?
  appearances          Int
  plate_appearances    Int
  at_bats              Int
  hits                 Int
  walks                Int
  singles              Int
  doubles              Int
  triples              Int
  quadruples           Int
  home_runs            Int
  runs_batted_in       Float
  strikeouts           Int
  sacrifice_bunts      Int
  sacrifice_flies      Int
  at_bats_risp         Int
  hits_risp            Int
  batting_average_risp Float?
  on_base_slugging     Float?
  total_bases          Int
  hit_by_pitches       Int
  ground_outs          Int
  flyouts              Int
  gidp                 Int

  runningStats PlayerRunningStatsSeason?
  team         Team                      @relation(fields: [team_id, team_valid_from], references: [team_id, valid_from])

  @@id(fields: [player_id, season, team_id])
  @@map("batting_stats_player_season")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerBattingStatsSeasonCombined {
  player_id            String
  player_name          String
  season               Int
  first_appearance     Int
  batting_average      Float?
  on_base_percentage   Float?
  slugging             Float?
  appearances          Int
  plate_appearances    Int
  at_bats              Int
  hits                 Int
  walks                Int
  singles              Int
  doubles              Int
  triples              Int
  quadruples           Int
  home_runs            Int
  runs_batted_in       Float
  strikeouts           Int
  sacrifice_bunts      Int
  sacrifice_flies      Int
  at_bats_risp         Int
  hits_risp            Int
  batting_average_risp Float?
  on_base_slugging     Float?
  total_bases          Int
  hit_by_pitches       Int
  ground_outs          Int
  flyouts              Int
  gidp                 Int

  runningStats PlayerRunningStatsSeasonCombined?

  @@id(fields: [player_id, season])
  @@map("batting_stats_player_season_combined")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerBattingStatsPostseason {
  player_id            String
  player_name          String
  team_id              String
  team_valid_from      DateTime
  team_valid_until     DateTime?
  season               Int
  batting_average      Float?
  on_base_percentage   Float?
  slugging             Float?
  appearances          Int
  plate_appearances    Int
  at_bats              Int
  hits                 Int
  walks                Int
  singles              Int
  doubles              Int
  triples              Int
  quadruples           Int
  home_runs            Int
  runs_batted_in       Float
  strikeouts           Int
  sacrifice_bunts      Int
  sacrifice_flies      Int
  at_bats_risp         Int
  hits_risp            Int
  batting_average_risp Float?
  on_base_slugging     Float?
  total_bases          Int
  hit_by_pitches       Int
  ground_outs          Int
  flyouts              Int
  gidp                 Int

  runningStats PlayerRunningStatsPostseason?
  team         Team                          @relation(fields: [team_id, team_valid_from], references: [team_id, valid_from])

  @@id(fields: [player_id, season, team_id])
  @@map("batting_stats_player_playoffs_season")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerBattingStatsLifetime {
  player_id            String
  player_name          String
  batting_average      Float?
  on_base_percentage   Float?
  slugging             Float?
  appearances          Int
  plate_appearances    Int
  at_bats              Int
  hits                 Int
  walks                Int
  singles              Int
  doubles              Int
  triples              Int
  quadruples           Int
  home_runs            Int
  runs_batted_in       Float
  strikeouts           Int
  sacrifice_bunts      Int
  sacrifice_flies      Int
  at_bats_risp         Int
  hits_risp            Int
  batting_average_risp Float?
  on_base_slugging     Float?
  total_bases          Int
  hit_by_pitches       Int
  ground_outs          Int
  flyouts              Int
  gidp                 Int

  runningStats PlayerRunningStatsLifetime?

  @@id(fields: [player_id])
  @@map("batting_stats_player_lifetime")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerBattingStatsPostseasonLifetime {
  player_id            String
  player_name          String
  batting_average      Float?
  on_base_percentage   Float?
  slugging             Float?
  appearances          Int
  plate_appearances    Int
  at_bats              Int
  hits                 Int
  walks                Int
  singles              Int
  doubles              Int
  triples              Int
  quadruples           Int
  home_runs            Int
  runs_batted_in       Float
  strikeouts           Int
  sacrifice_bunts      Int
  sacrifice_flies      Int
  at_bats_risp         Int
  hits_risp            Int
  batting_average_risp Float?
  on_base_slugging     Float?
  total_bases          Int
  hit_by_pitches       Int
  ground_outs          Int
  flyouts              Int
  gidp                 Int

  runningStats PlayerRunningStatsPostseasonLifetime?

  @@id(fields: [player_id])
  @@map("batting_stats_player_playoffs_lifetime")
}

// @View - Must be manually updated with every new Prisma introspection
model TeamBattingStatsSeason {
  team_id              String
  team_valid_from      DateTime
  team_valid_until     DateTime?
  season               Int
  batting_average      Float?
  on_base_percentage   Float?
  slugging             Float?
  appearances          Int
  plate_appearances    Int
  at_bats              Int
  hits                 Int
  walks                Int
  singles              Int
  doubles              Int
  triples              Int
  quadruples           Int
  home_runs            Int
  runs_batted_in       Float
  strikeouts           Int
  sacrifice_bunts      Int
  sacrifice_flies      Int
  at_bats_risp         Int
  hits_risp            Int
  batting_average_risp Float?
  on_base_slugging     Float?
  total_bases          Int
  hit_by_pitches       Int
  ground_outs          Int
  flyouts              Int
  gidp                 Int

  runningStats TeamRunningStatsSeason?
  team         Team                    @relation(fields: [team_id, team_valid_from], references: [team_id, valid_from])

  @@id(fields: [team_id, season])
  @@map("batting_stats_team_season")
}

// @View - Must be manually updated with every new Prisma introspection
model TeamBattingStatsPostseason {
  team_id              String
  team_valid_from      DateTime
  team_valid_until     DateTime?
  season               Int
  batting_average      Float?
  on_base_percentage   Float?
  slugging             Float?
  appearances          Int
  plate_appearances    Int
  at_bats              Int
  hits                 Int
  walks                Int
  singles              Int
  doubles              Int
  triples              Int
  quadruples           Int
  home_runs            Int
  runs_batted_in       Float
  strikeouts           Int
  sacrifice_bunts      Int
  sacrifice_flies      Int
  at_bats_risp         Int
  hits_risp            Int
  batting_average_risp Float?
  on_base_slugging     Float?
  total_bases          Int
  hit_by_pitches       Int
  ground_outs          Int
  flyouts              Int
  gidp                 Int

  runningStats TeamRunningStatsPostseason?
  team         Team                        @relation(fields: [team_id, team_valid_from], references: [team_id, valid_from])

  @@id(fields: [team_id, season])
  @@map("batting_stats_team_playoffs_season")
}

// Pitching Stats

// @View - Must be manually updated with every new Prisma introspection
model PlayerPitchingStatsSeason {
  player_id           String
  player_name         String
  season              Int
  team_id             String
  team_valid_from     DateTime
  team_valid_until    DateTime?
  games               Int
  wins                Int
  losses              Int
  win_pct             Float
  pitches_thrown      Int
  batters_faced       Int
  outs_recorded       Int
  innings             Float
  runs_allowed        Float
  shutouts            Int
  quality_starts      Int
  strikeouts          Int
  walks               Int
  home_runs_allowed   Int
  hits_allowed        Int
  hit_by_pitches      Float
  earned_run_average  Float
  walks_per_9         Float
  hits_per_9          Float
  strikeouts_per_9    Float
  home_runs_per_9     Float
  whip                Float
  strikeouts_per_walk Float

  team Team @relation(fields: [team_id, team_valid_from], references: [team_id, valid_from])

  @@id(fields: [player_id, season, team_id])
  @@map("pitching_stats_player_season")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerPitchingStatsSeasonCombined {
  player_id           String
  player_name         String
  season              Int
  games               Int
  wins                Int
  losses              Int
  win_pct             Float
  pitches_thrown      Int
  batters_faced       Int
  outs_recorded       Int
  innings             Float
  runs_allowed        Float
  shutouts            Int
  quality_starts      Int
  strikeouts          Int
  walks               Int
  home_runs_allowed   Int
  hits_allowed        Int
  hit_by_pitches      Float
  earned_run_average  Float
  walks_per_9         Float
  hits_per_9          Float
  strikeouts_per_9    Float
  home_runs_per_9     Float
  whip                Float
  strikeouts_per_walk Float

  @@id(fields: [player_id, season])
  @@map("pitching_stats_player_season_combined")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerPitchingStatsPostseason {
  player_id           String
  player_name         String
  season              Int
  team_id             String
  team_valid_from     DateTime
  team_valid_until    DateTime?
  games               Int
  wins                Int
  losses              Int
  win_pct             Float
  pitches_thrown      Int
  batters_faced       Int
  outs_recorded       Int
  innings             Float
  runs_allowed        Float
  shutouts            Int
  quality_starts      Int
  strikeouts          Int
  walks               Int
  home_runs_allowed   Int
  hits_allowed        Int
  hit_by_pitches      Float
  earned_run_average  Float
  walks_per_9         Float
  hits_per_9          Float
  strikeouts_per_9    Float
  home_runs_per_9     Float
  whip                Float
  strikeouts_per_walk Float

  team Team @relation(fields: [team_id, team_valid_from], references: [team_id, valid_from])

  @@id(fields: [player_id, season, team_id])
  @@map("pitching_stats_player_playoffs_season")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerPitchingStatsLifetime {
  player_id           String
  player_name         String
  games               Int
  wins                Int
  losses              Int
  win_pct             Float
  pitches_thrown      Int
  batters_faced       Int
  outs_recorded       Int
  innings             Float
  runs_allowed        Float
  shutouts            Int
  quality_starts      Int
  strikeouts          Int
  walks               Int
  home_runs_allowed   Int
  hits_allowed        Int
  hit_by_pitches      Float
  earned_run_average  Float
  walks_per_9         Float
  hits_per_9          Float
  strikeouts_per_9    Float
  home_runs_per_9     Float
  whip                Float
  strikeouts_per_walk Float

  @@id(fields: [player_id])
  @@map("pitching_stats_player_lifetime")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerPitchingStatsPostseasonLifetime {
  player_id           String
  player_name         String
  games               Int
  wins                Int
  losses              Int
  win_pct             Float
  pitches_thrown      Int
  batters_faced       Int
  outs_recorded       Int
  innings             Float
  runs_allowed        Float
  shutouts            Int
  quality_starts      Int
  strikeouts          Int
  walks               Int
  home_runs_allowed   Int
  hits_allowed        Int
  hit_by_pitches      Float
  earned_run_average  Float
  walks_per_9         Float
  hits_per_9          Float
  strikeouts_per_9    Float
  home_runs_per_9     Float
  whip                Float
  strikeouts_per_walk Float

  @@id(fields: [player_id])
  @@map("pitching_stats_player_playoffs_lifetime")
}

// @View - Must be manually updated with every new Prisma introspection
model TeamPitchingStatsSeason {
  season              Int
  team_id             String
  team_valid_from     DateTime
  team_valid_until    DateTime?
  games               Int
  wins                Int
  losses              Int
  win_pct             Float
  pitches_thrown      Int
  batters_faced       Int
  outs_recorded       Int
  innings             Float
  runs_allowed        Float
  shutouts            Int
  quality_starts      Int
  strikeouts          Int
  walks               Int
  home_runs_allowed   Int
  hits_allowed        Int
  hit_by_pitches      Float
  earned_run_average  Float
  walks_per_9         Float
  hits_per_9          Float
  strikeouts_per_9    Float
  home_runs_per_9     Float
  whip                Float
  strikeouts_per_walk Float

  team Team @relation(fields: [team_id, team_valid_from], references: [team_id, valid_from])

  @@id(fields: [team_id, season])
  @@map("pitching_stats_team_season")
}

// @View - Must be manually updated with every new Prisma introspection
model TeamPitchingStatsPostseason {
  season              Int
  team_id             String
  team_valid_from     DateTime
  team_valid_until    DateTime?
  games               Int
  wins                Int
  losses              Int
  win_pct             Float
  pitches_thrown      Int
  batters_faced       Int
  outs_recorded       Int
  innings             Float
  runs_allowed        Float
  shutouts            Int
  quality_starts      Int
  strikeouts          Int
  walks               Int
  home_runs_allowed   Int
  hits_allowed        Int
  hit_by_pitches      Float
  earned_run_average  Float
  walks_per_9         Float
  hits_per_9          Float
  strikeouts_per_9    Float
  home_runs_per_9     Float
  whip                Float
  strikeouts_per_walk Float

  team Team @relation(fields: [team_id, team_valid_from], references: [team_id, valid_from])

  @@id(fields: [team_id, season])
  @@map("pitching_stats_team_playoffs_season")
}

// Base Running Stats

// @View - Must be manually updated with every new Prisma introspection
model PlayerRunningStatsSeason {
  player_id        String
  player_name      String
  team             String?
  team_id          String
  team_valid_from  DateTime?
  team_valid_until DateTime?
  season           Int
  stolen_bases     Int
  caught_stealing  Int
  runs             Float

  battingStats PlayerBattingStatsSeason @relation(fields: [player_id, season, team_id], references: [player_id, season, team_id])

  @@id(fields: [player_id, season, team_id])
  @@map("running_stats_player_season")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerRunningStatsSeasonCombined {
  player_id        String
  player_name      String
  season           Int
  stolen_bases     Int
  caught_stealing  Int
  runs             Float

  battingStats PlayerBattingStatsSeasonCombined @relation(fields: [player_id, season], references: [player_id, season])

  @@id(fields: [player_id, season])
  @@map("running_stats_player_season_combined")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerRunningStatsPostseason {
  player_id        String
  player_name      String
  team             String?
  team_id          String
  team_valid_from  DateTime?
  team_valid_until DateTime?
  season           Int
  stolen_bases     Int
  caught_stealing  Int
  runs             Float

  battingStats PlayerBattingStatsPostseason @relation(fields: [player_id, season, team_id], references: [player_id, season, team_id])

  @@id(fields: [player_id, season, team_id])
  @@map("running_stats_player_playoffs_season")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerRunningStatsLifetime {
  player_id       String
  player_name     String
  stolen_bases    Int
  caught_stealing Int
  runs            Float

  battingStats PlayerBattingStatsLifetime @relation(fields: [player_id], references: [player_id])

  @@id(fields: [player_id])
  @@map("running_stats_player_lifetime")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerRunningStatsPostseasonLifetime {
  player_id       String
  player_name     String
  stolen_bases    Int
  caught_stealing Int
  runs            Float

  battingStats PlayerBattingStatsPostseasonLifetime @relation(fields: [player_id], references: [player_id])

  @@id(fields: [player_id])
  @@map("running_stats_player_playoffs_lifetime")
}

// @View - Must be manually updated with every new Prisma introspection
model TeamRunningStatsSeason {
  team            String?
  team_id         String
  season          Int
  stolen_bases    Int
  caught_stealing Int
  runs            Float

  battingStats TeamBattingStatsSeason @relation(fields: [team_id, season], references: [team_id, season])

  @@id(fields: [team_id, season])
  @@map("running_stats_team_season")
}

// @View - Must be manually updated with every new Prisma introspection
model TeamRunningStatsPostseason {
  team            String?
  team_id         String
  season          Int
  stolen_bases    Int
  caught_stealing Int
  runs            Float

  battingStats TeamBattingStatsPostseason @relation(fields: [team_id, season], references: [team_id, season])

  @@id(fields: [team_id, season])
  @@map("running_stats_team_playoffs_season")
}

// Leaderboards

// @View - Must be manually updated with every new Prisma introspection
model PlayerBattingLeaderboardsLifetime {
  player_id   String
  player_name String
  url_slug    String
  value       Float
  rank        Int
  stat        String

  @@id(fields: [player_id])
  @@map("ref_leaderboard_lifetime_batting")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerPitchingLeaderboardsLifetime {
  player_id   String
  player_name String
  url_slug    String
  value       Float
  rank        Int
  stat        String

  @@id(fields: [player_id])
  @@map("ref_leaderboard_lifetime_pitching")
}
