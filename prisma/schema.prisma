generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AppliedPatches {
  patch_id   Int     @id @default(autoincrement())
  patch_hash String?

  @@map("applied_patches")
}

model ChroniclerHashGameEvent {
  chronicler_hash_game_event_id Int        @id @default(autoincrement())
  update_hash                   String?
  game_event_id                 Int?
  game_events                   GameEvent? @relation(fields: [game_event_id], references: [id])

  @@index([game_event_id], name: "chronicler_hash_game_event_indx_game_event_id")
  @@map("chronicler_hash_game_event")
}

model ChroniclerMeta {
  id               Int       @id
  season           Float
  day              Float
  game_timestamp   DateTime?
  team_timestamp   DateTime?
  player_timestamp DateTime?

  @@map("chronicler_meta")
}

model GameEventBaseRunner {
  id                     Int        @id @default(autoincrement())
  game_event_id          Int?
  runner_id              String?
  responsible_pitcher_id String?
  base_before_play       Int?
  base_after_play        Int?
  was_base_stolen        Boolean?
  was_caught_stealing    Boolean?
  was_picked_off         Boolean?
  runner_scored          Boolean?   @default(false)
  runs_scored            Float?
  game_events            GameEvent? @relation(fields: [game_event_id], references: [id])

  @@map("game_event_base_runners")
}

model GameEvent {
  id                                 Int                       @id @default(autoincrement())
  perceived_at                       DateTime?
  game_id                            String?
  event_type                         String?
  event_index                        Int?
  inning                             Int?
  top_of_inning                      Boolean?
  outs_before_play                   Int?
  batter_id                          String?
  batter_team_id                     String?
  pitcher_id                         String?
  pitcher_team_id                    String?
  home_score                         Float?
  away_score                         Float?
  home_strike_count                  Int?                      @default(3)
  away_strike_count                  Int?                      @default(3)
  batter_count                       Int?
  pitches                            String[]
  total_strikes                      Int?
  total_balls                        Int?
  total_fouls                        Int?
  is_leadoff                         Boolean?
  is_pinch_hit                       Boolean?
  lineup_position                    Int?
  is_last_event_for_plate_appearance Boolean?
  bases_hit                          Int?
  runs_batted_in                     Float?
  is_sacrifice_hit                   Boolean?
  is_sacrifice_fly                   Boolean?
  outs_on_play                       Int?
  is_double_play                     Boolean?
  is_triple_play                     Boolean?
  is_wild_pitch                      Boolean?
  batted_ball_type                   String?
  is_bunt                            Boolean?
  errors_on_play                     Int?
  batter_base_after_play             Int?
  is_last_game_event                 Boolean?
  event_text                         String[]
  additional_context                 String?
  season                             Int?
  day                                Int?
  parsing_error                      Boolean?
  parsing_error_list                 String[]
  fixed_error                        Boolean?
  fixed_error_list                   String[]
  home_ball_count                    Int?                      @default(4)
  away_ball_count                    Int?                      @default(4)
  away_base_count                    Int?                      @default(4)
  home_base_count                    Int?                      @default(4)
  tournament                         Int?
  games                              Game?                     @relation(fields: [game_id], references: [game_id])
  chronicler_hash_game_event         ChroniclerHashGameEvent[]
  game_event_base_runners            GameEventBaseRunner[]
  outcomes                           Outcome[]

  @@unique([game_id, event_index], name: "no_dupes")
  @@index([event_type], name: "game_events_indx_event_type")
  @@index([game_id], name: "game_events_indx_game_id")
  @@map("game_events")
}

model Game {
  game_id                String      @id
  day                    Int
  season                 Int
  tournament             Int
  last_game_event        Int?
  home_odds              Float?
  away_odds              Float?
  weather                Int?
  series_index           Int?
  series_length          Int?
  is_postseason          Boolean?
  home_team              String?
  away_team              String?
  home_score             Float?
  away_score             Float?
  number_of_innings      Int?
  ended_on_top_of_inning Boolean?
  ended_in_shame         Boolean?
  terminology_id         String?
  rules_id               String?
  statsheet_id           String?
  winning_pitcher_id     String?
  losing_pitcher_id      String?
  game_events            GameEvent[]

  @@map("games")
}

model ImportedLog {
  id          Int       @id @default(autoincrement())
  key         String?
  imported_at DateTime?

  @@map("imported_logs")
}

model Outcome {
  id            Int        @id @default(autoincrement())
  game_event_id Int?
  entity_id     String?
  event_type    String?
  original_text String?
  game_events   GameEvent? @relation(fields: [game_event_id], references: [id])

  @@map("outcomes")
}

model PlayerModification {
  player_modifications_id Int       @id @default(autoincrement())
  player_id               String?
  modification            String?
  valid_from              DateTime?
  valid_until             DateTime?

  @@index([player_id, valid_from, valid_until], name: "player_modifications_indx_player_id_timespan")
  @@map("player_modifications")
}

model TeamModification {
  team_modifications_id Int       @id @default(autoincrement())
  team_id               String?
  modification          String?
  valid_from            DateTime?
  valid_until           DateTime?

  @@map("team_modifications")
}

model TeamRoster {
  team_roster_id   Int       @id @default(autoincrement())
  team_id          String?
  position_id      Int?
  valid_from       DateTime?
  valid_until      DateTime?
  player_id        String?
  position_type_id Float?

  @@index([valid_until, team_id, position_id, position_type_id], name: "team_roster_idx")
  @@index([player_id, valid_from, valid_until], name: "team_roster_indx_player_id_timespan")
  @@map("team_roster")
}

model TimeMap {
  season      Int
  day         Int
  first_time  DateTime?
  time_map_id Int       @id @default(autoincrement())
  phase_id    Int?

  @@unique([season, day, phase_id], name: "season_day_unique")
  @@map("time_map")
}

// @View - Must be manually updated with every new Prisma introspection
model Player {
  player_id        String
  player_name      String?
  valid_from       DateTime
  valid_until      DateTime?
  deceased         Boolean?
  anticapitalism   Float?
  base_thirst      Float?
  buoyancy         Float?
  chasiness        Float?
  coldness         Float?
  continuation     Float?
  divinity         Float?
  ground_friction  Float?
  indulgence       Float?
  laserlikeness    Float?
  martyrdom        Float?
  moxie            Float?
  musclitude       Float?
  omniscience      Float?
  overpowerment    Float?
  patheticism      Float?
  ruthlessness     Float?
  shakespearianism Float?
  suppression      Float?
  tenaciousness    Float?
  thwackability    Float?
  tragicness       Float?
  unthwackability  Float?
  watchfulness     Float?
  pressurization   Float?
  cinnamon         Float?
  total_fingers    Int?
  soul             Int?
  fate             Int?
  peanut_allergy   Boolean?
  armor            String?
  bat              String?
  ritual           String?
  coffee           String?
  blood            String?
  url_slug         String?

  current_location    String?
  current_state       String?
  gameday_from        Int
  gamestate_from      String
  position_id         Int?
  position_type       String?
  season_from         Int
  team                String?
  team_abbreviation   String?
  team_id             String?
  modifications       String[]
  baserunning_rating  Int?
  baserunning_stars   Int?
  batting_rating      Int?
  batting_stars       Int?
  defense_rating      Int?
  defense_stars       Int?
  pitching_rating     Int?
  pitching_stars      Int?

  @@id(fields: [player_id, valid_from])
  @@map("players_info_expanded_all")
}

// @View - Must be manually updated with every new Prisma introspection
model Team {
  team_id             String
  location            String
  nickname            String
  full_name           String
  team_abbreviation   String?
  url_slug            String
  current_team_status String
  valid_from          DateTime
  valid_until         DateTime?
  gameday_from        Int
  season_from         Int
  division            String?
  division_id         String?
  league              String?
  league_id           String?
  tournament_name     String?
  modifications       String[]

  @@id(fields: [team_id, valid_from])
  @@map("teams_info_expanded_all")
}

// @View - Must be manually updated with every new Prisma introspection
model CurrentTeamRoster {
  valid_from      DateTime
  gameday_from    Int
  season_from     Int
  team_id         String
  nickname        String
  player_id       String    @id
  player_name     String
  position_type   String
  position_id     Int

  @@map("rosters_current")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerBattingStatsSeason {
  player_id             String
  player_name           String
  team_id               String
  team                  String
  season                Int
  batting_average       Float?
  on_base_percentage    Float?
  slugging              Float?
  plate_appearances     Int
  at_bats               Int
  walks                 Int
  singles               Int
  doubles               Int
  triples               Int
  quadruples            Int
  home_runs             Int
  runs_batted_in        Int
  strikeouts            Int
  sacrifices            Int
  at_bats_risp          Int
  hits_risps            Int
  batting_average_risp  Float?
  on_base_slugging      Float?
  total_bases           Int
  hbps                  Int
  ground_outs           Int
  flyouts               Int
  gidps                 Int

  @@id(fields: [player_id, season])
  @@map("batting_stats_player_season")
}


// @View - Must be manually updated with every new Prisma introspection
model PlayerPitchingStatsSeason {
  player_id       String
  player_name     String
  season          Int
  team_ids        String[]
  games           Int
  wins            Int
  losses          Int
  pitch_count     Int
  batters_faced   Int
  outs_recorded   Int
  innings         Int
  runs_allowed    Int
  shutouts        Int
  quality_starts  Int
  strikeouts      Int
  walks           Int
  hrs_allowed     Int
  hits_allowed    Int
  hbps            Float
  era             Float
  bb_per_9        Float
  hits_per_9      Float
  k_per_9         Float
  hr_per_9        Float

  @@id(fields: [player_id, season])
  @@map("pitching_stats_player_season")
}
