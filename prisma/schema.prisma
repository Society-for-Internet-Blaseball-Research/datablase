generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AppliedPatches {
  patch_id   Int     @id @default(autoincrement())
  patch_hash String? @db.Uuid

  @@map("applied_patches")
}

model ChroniclerHashGameEvent {
  chronicler_hash_game_event_id Int        @id @default(autoincrement())
  update_hash                   String?    @db.Uuid
  game_event_id                 Int?
  game_events                   GameEvent? @relation(fields: [game_event_id], references: [id])

  @@index([game_event_id], name: "chronicler_hash_game_event_indx_game_event_id")
  @@map("chronicler_hash_game_event")
}

model ChroniclerMeta {
  id                 Int       @id @db.SmallInt
  season             Decimal   @db.Decimal
  day                Decimal   @db.Decimal
  game_timestamp     DateTime? @db.Timestamp(6)
  team_timestamp     DateTime? @db.Timestamp(6)
  player_timestamp   DateTime? @db.Timestamp(6)
  division_timestamp DateTime? @db.Timestamp(6)
  stadium_timestamp  DateTime? @db.Timestamp(6)

  @@map("chronicler_meta")
}

model GameEventBaseRunner {
  id                     Int        @id @default(autoincrement())
  game_event_id          Int?
  runner_id              String?    @db.VarChar(36)
  responsible_pitcher_id String?    @db.VarChar(36)
  base_before_play       Int?
  base_after_play        Int?
  was_base_stolen        Boolean?
  was_caught_stealing    Boolean?
  was_picked_off         Boolean?
  runner_scored          Boolean?   @default(false)
  runs_scored            Decimal?   @db.Decimal
  game_events            GameEvent? @relation(fields: [game_event_id], references: [id])

  @@map("game_event_base_runners")
}

model GameEvent {
  id                                 Int                       @id @default(autoincrement())
  perceived_at                       DateTime?                 @db.Timestamp(6)
  game_id                            String?                   @db.VarChar(36)
  event_type                         String?
  event_index                        Int?
  inning                             Int?                      @db.SmallInt
  top_of_inning                      Boolean?
  outs_before_play                   Int?                      @db.SmallInt
  batter_id                          String?                   @db.VarChar(36)
  batter_team_id                     String?                   @db.VarChar(36)
  pitcher_id                         String?                   @db.VarChar(36)
  pitcher_team_id                    String?                   @db.VarChar(36)
  home_score                         Decimal?                  @db.Decimal
  away_score                         Decimal?                  @db.Decimal
  home_strike_count                  Int?                      @default(3)
  away_strike_count                  Int?                      @default(3)
  batter_count                       Int?
  pitches                            String[]                  @db.VarChar(1)
  total_strikes                      Int?                      @db.SmallInt
  total_balls                        Int?                      @db.SmallInt
  total_fouls                        Int?                      @db.SmallInt
  is_leadoff                         Boolean?
  is_pinch_hit                       Boolean?
  lineup_position                    Int?                      @db.SmallInt
  is_last_event_for_plate_appearance Boolean?
  bases_hit                          Int?                      @db.SmallInt
  runs_batted_in                     Decimal?                  @db.Decimal
  is_sacrifice_hit                   Boolean?
  is_sacrifice_fly                   Boolean?
  outs_on_play                       Int?                      @db.SmallInt
  is_double_play                     Boolean?
  is_triple_play                     Boolean?
  is_wild_pitch                      Boolean?
  batted_ball_type                   String?
  is_bunt                            Boolean?
  errors_on_play                     Int?                      @db.SmallInt
  batter_base_after_play             Int?                      @db.SmallInt
  is_last_game_event                 Boolean?
  event_text                         String[]
  additional_context                 String?
  season                             Int?
  day                                Int?
  parsing_error                      Boolean?
  parsing_error_list                 String[]
  fixed_error                        Boolean?
  fixed_error_list                   String[]
  home_ball_count                    Int?                      @default(4)
  away_ball_count                    Int?                      @default(4)
  away_base_count                    Int?                      @default(4)
  home_base_count                    Int?                      @default(4)
  tournament                         Int?

  games                              Game?                     @relation(fields: [game_id], references: [game_id])
  chronicler_hash_game_event         ChroniclerHashGameEvent[]
  game_event_base_runners            GameEventBaseRunner[]
  outcomes                           Outcome[]

  @@unique([game_id, event_index], name: "no_dupes")
  @@index([event_type], name: "game_events_indx_event_type")
  @@index([game_id], name: "game_events_indx_game_id")
  @@map("game_events")
}

model Game {
  game_id                String      @id @db.VarChar(36)
  day                    Int?
  season                 Int?
  last_game_event        Int?
  home_odds              Decimal?    @db.Decimal
  away_odds              Decimal?    @db.Decimal
  weather                Int?
  series_index           Int?
  series_length          Int?
  is_postseason          Boolean?
  home_team              String?     @db.VarChar(36)
  away_team              String?     @db.VarChar(36)
  home_score             Decimal?    @db.Decimal
  away_score             Decimal?    @db.Decimal
  number_of_innings      Int?
  ended_on_top_of_inning Boolean?
  ended_in_shame         Boolean?
  terminology_id         String?     @db.VarChar(36)
  rules_id               String?     @db.VarChar(36)
  statsheet_id           String?     @db.VarChar(36)
  winning_pitcher_id     String?     @db.VarChar
  losing_pitcher_id      String?     @db.VarChar
  tournament             Int?
  outcomes               String[]
  game_events            GameEvent[]

  @@map("games")
}

model ImportedLog {
  id          Int       @id @default(autoincrement())
  key         String?
  imported_at DateTime? @db.Timestamp(6)

  @@map("imported_logs")
}

model Outcome {
  id            Int        @id @default(autoincrement())
  game_event_id Int?
  entity_id     String?    @db.VarChar(36)
  event_type    String?
  original_text String?
  game_events   GameEvent? @relation(fields: [game_event_id], references: [id])

  @@map("outcomes")
}

model PlayerModification {
  player_modifications_id Int       @id @default(autoincrement())
  player_id               String?   @db.VarChar
  modification            String?   @db.VarChar
  valid_from              DateTime? @db.Timestamp(6)
  valid_until             DateTime? @db.Timestamp(6)
  tournament              Int?      @default(-1)

  @@index([player_id, valid_from, valid_until], name: "player_modifications_indx_player_id_timespan")
  @@map("player_modifications")
}

model TeamModification {
  team_modifications_id Int       @id @default(autoincrement())
  team_id               String?   @db.VarChar
  modification          String?   @db.VarChar
  valid_from            DateTime? @db.Timestamp(6)
  valid_until           DateTime? @db.Timestamp(6)

  @@map("team_modifications")
}

model TeamRoster {
  team_roster_id   Int       @id @default(autoincrement())
  team_id          String?   @db.VarChar
  position_id      Int?
  valid_from       DateTime? @db.Timestamp(6)
  valid_until      DateTime? @db.Timestamp(6)
  player_id        String?   @db.VarChar
  position_type_id Decimal?  @db.Decimal
  tournament       Int?      @default(-1)

  @@index([valid_until, team_id, position_id, position_type_id], name: "team_roster_idx")
  @@index([player_id, valid_from, valid_until], name: "team_roster_indx_player_id_timespan")
  @@map("team_roster")
}

model TimeMap {
  season      Int
  day         Int
  first_time  DateTime? @db.Timestamp(6)
  time_map_id Int       @id @default(autoincrement())
  phase_id    Int?

  @@unique([season, day, phase_id], name: "season_day_unique")
  @@map("time_map")
}

// @View - Must be manually updated with every new Prisma introspection
model Player {
  player_id          String    @db.VarChar(36)
  valid_from         DateTime  @db.Timestamp(6)
  valid_until        DateTime? @db.Timestamp(6)
  player_name        String?   @db.VarChar
  deceased           Boolean?
  anticapitalism     Decimal?  @db.Decimal
  base_thirst        Decimal?  @db.Decimal
  buoyancy           Decimal?  @db.Decimal
  chasiness          Decimal?  @db.Decimal
  coldness           Decimal?  @db.Decimal
  continuation       Decimal?  @db.Decimal
  divinity           Decimal?  @db.Decimal
  ground_friction    Decimal?  @db.Decimal
  indulgence         Decimal?  @db.Decimal
  laserlikeness      Decimal?  @db.Decimal
  martyrdom          Decimal?  @db.Decimal
  moxie              Decimal?  @db.Decimal
  musclitude         Decimal?  @db.Decimal
  omniscience        Decimal?  @db.Decimal
  overpowerment      Decimal?  @db.Decimal
  patheticism        Decimal?  @db.Decimal
  ruthlessness       Decimal?  @db.Decimal
  shakespearianism   Decimal?  @db.Decimal
  suppression        Decimal?  @db.Decimal
  tenaciousness      Decimal?  @db.Decimal
  thwackability      Decimal?  @db.Decimal
  tragicness         Decimal?  @db.Decimal
  unthwackability    Decimal?  @db.Decimal
  watchfulness       Decimal?  @db.Decimal
  pressurization     Decimal?  @db.Decimal
  cinnamon           Decimal?  @db.Decimal
  total_fingers      Int?      @db.SmallInt
  soul               Int?      @db.SmallInt
  fate               Int?      @db.SmallInt
  peanut_allergy     Boolean?
  armor              String?
  bat                String?
  ritual             String?
  url_slug           String?   @db.VarChar
  evolution          Int?      @default(0)
  batting_rating     Decimal?  @default(-1) @db.Decimal
  pitching_rating    Decimal?  @default(-1) @db.Decimal
  baserunning_rating Decimal?  @default(-1) @db.Decimal
  defense_rating     Decimal?  @default(-1) @db.Decimal

  blood              String?
  coffee             String?
  current_state           String?
  current_location        String?
  debut_gameday           Int?
  debut_season            Int?
  debut_tournament        Int?
  incineration_season     Int?
  incineration_gameday    Int?
  incineration_phase      String?
  gameday_from            Int?
  season_from             Int?
  tournament_from         Int?
  phase_type_from         String?
  position_id             Int?
  position_type           String?
  team                    String?
  team_abbreviation       String?
  team_id                 String?
  modifications           String[]
  baserunning_stars       Float?
  batting_stars           Float?
  defense_stars           Float?
  pitching_stars          Float?
  items                   String[]
  durabilities            Float[]
  healths                 Float[]
  item_batting_rating     Float?
  item_defense_rating     Float?
  item_baserunning_rating Float?
  item_pitching_rating    Float?

  @@id(fields: [player_id, valid_from])
  @@map("players_info_expanded_all")
}

// @View - Must be manually updated with every new Prisma introspection
model Team {
  team_id              String    @db.VarChar(36)
  location             String
  nickname             String
  full_name            String
  valid_from           DateTime  @db.Timestamp(6)
  valid_until          DateTime? @db.Timestamp(6)
  url_slug             String    @db.VarChar
  stadium_id           String?   @default("") @db.VarChar(36)
  team_abbreviation    String?   @default("") @db.VarChar(10)
  team_main_color      String?   @default("") @db.VarChar(10)
  team_secondary_color String?   @default("") @db.VarChar(10)
  team_emoji           String?   @default("") @db.VarChar
  team_slogan          String?   @default("") @db.VarChar
  // deceased             Boolean   @default(false)

  team_current_status String?
  gameday_from        Int?
  season_from         Int?
  division            String?
  division_id         String?
  league              String?
  league_id           String?
  tournament_name     String?
  modifications       String[]
  stadium_name        String?
  stadium_nickname    String?

  PlayerBattingStatsGame        PlayerBattingStatsGame[]
  PlayerBattingStatsSeason      PlayerBattingStatsSeason[]
  PlayerBattingStatsPostseason  PlayerBattingStatsPostseason[]
  PlayerPitchingStatsGame       PlayerPitchingStatsGame[]
  PlayerPitchingStatsSeason     PlayerPitchingStatsSeason[]
  PlayerPitchingStatsPostseason PlayerPitchingStatsPostseason[]

  TeamBattingStatsSeason      TeamBattingStatsSeason[]
  TeamBattingStatsPostseason  TeamBattingStatsPostseason[]
  TeamPitchingStatsSeason     TeamPitchingStatsSeason[]
  TeamPitchingStatsPostseason TeamPitchingStatsPostseason[]

  @@id(fields: [team_id, valid_from])
  @@map("teams_info_expanded_all")
}

// @View - Must be manually updated with every new Prisma introspection
model CurrentTeamRoster {
  valid_from    DateTime
  gameday_from  Int
  season_from   Int
  team_id       String
  nickname      String
  player_id     String   @id
  player_name   String
  position_type String
  position_id   Int

  @@map("rosters_current")
}

// Batting Stats

// @View - Must be manually updated with every new Prisma introspection
model PlayerBattingStatsGame {
  game_id              String
  player_id            String
  player_name          String
  team_id              String    @db.VarChar(36)
  team_valid_from      DateTime  @db.Timestamp(6)
  team_valid_until     DateTime? @db.Timestamp(6)
  season               Int
  day                  Int
  batting_average      Float?
  on_base_percentage   Float?
  slugging             Float?
  plate_appearances    Int
  at_bats              Int
  hits                 Int
  walks                Int
  singles              Int
  doubles              Int
  triples              Int
  quadruples           Int
  home_runs            Int
  runs_batted_in       Float
  strikeouts           Int
  sacrifice_bunts      Int
  sacrifice_flies      Int
  at_bats_risp         Int
  hits_risp            Int
  batting_average_risp Float?
  on_base_slugging     Float?
  total_bases          Int
  hit_by_pitches       Int
  ground_outs          Int
  flyouts              Int
  gidp                 Int

  runningStats PlayerRunningStatsGame?
  team         Team                    @relation(fields: [team_id, team_valid_from], references: [team_id, valid_from])

  @@id(fields: [game_id, player_id, team_id])
  @@map("batting_stats_player_single_game")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerBattingStatsSeason {
  player_id            String
  player_name          String
  team_id              String    @db.VarChar(36)
  team_valid_from      DateTime  @db.Timestamp(6)
  team_valid_until     DateTime? @db.Timestamp(6)
  season               Int
  first_appearance     Int
  batting_average      Float?
  on_base_percentage   Float?
  slugging             Float?
  appearances          Int
  plate_appearances    Int
  at_bats              Int
  hits                 Int
  walks                Int
  singles              Int
  doubles              Int
  triples              Int
  quadruples           Int
  home_runs            Int
  runs_batted_in       Float
  strikeouts           Int
  sacrifice_bunts      Int
  sacrifice_flies      Int
  at_bats_risp         Int
  hits_risp            Int
  batting_average_risp Float?
  on_base_slugging     Float?
  total_bases          Int
  hit_by_pitches       Int
  ground_outs          Int
  flyouts              Int
  gidp                 Int

  runningStats PlayerRunningStatsSeason?
  team         Team                      @relation(fields: [team_id, team_valid_from], references: [team_id, valid_from])

  @@id(fields: [player_id, season, team_id])
  @@map("batting_stats_player_season")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerBattingStatsSeasonCombined {
  player_id            String
  player_name          String
  season               Int
  first_appearance     Int
  batting_average      Float?
  on_base_percentage   Float?
  slugging             Float?
  appearances          Int
  plate_appearances    Int
  at_bats              Int
  hits                 Int
  walks                Int
  singles              Int
  doubles              Int
  triples              Int
  quadruples           Int
  home_runs            Int
  runs_batted_in       Float
  strikeouts           Int
  sacrifice_bunts      Int
  sacrifice_flies      Int
  at_bats_risp         Int
  hits_risp            Int
  batting_average_risp Float?
  on_base_slugging     Float?
  total_bases          Int
  hit_by_pitches       Int
  ground_outs          Int
  flyouts              Int
  gidp                 Int

  runningStats PlayerRunningStatsSeasonCombined?

  @@id(fields: [player_id, season])
  @@map("batting_stats_player_season_combined")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerBattingStatsPostseason {
  player_id            String
  player_name          String
  team_id              String    @db.VarChar(36)
  team_valid_from      DateTime  @db.Timestamp(6)
  team_valid_until     DateTime? @db.Timestamp(6)
  season               Int
  batting_average      Float?
  on_base_percentage   Float?
  slugging             Float?
  appearances          Int
  plate_appearances    Int
  at_bats              Int
  hits                 Int
  walks                Int
  singles              Int
  doubles              Int
  triples              Int
  quadruples           Int
  home_runs            Int
  runs_batted_in       Float
  strikeouts           Int
  sacrifice_bunts      Int
  sacrifice_flies      Int
  at_bats_risp         Int
  hits_risp            Int
  batting_average_risp Float?
  on_base_slugging     Float?
  total_bases          Int
  hit_by_pitches       Int
  ground_outs          Int
  flyouts              Int
  gidp                 Int

  runningStats PlayerRunningStatsPostseason?
  team         Team                          @relation(fields: [team_id, team_valid_from], references: [team_id, valid_from])

  @@id(fields: [player_id, season, team_id])
  @@map("batting_stats_player_playoffs_season")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerBattingStatsLifetime {
  player_id            String
  player_name          String
  batting_average      Float?
  on_base_percentage   Float?
  slugging             Float?
  appearances          Int
  plate_appearances    Int
  at_bats              Int
  hits                 Int
  walks                Int
  singles              Int
  doubles              Int
  triples              Int
  quadruples           Int
  home_runs            Int
  runs_batted_in       Float
  strikeouts           Int
  sacrifice_bunts      Int
  sacrifice_flies      Int
  at_bats_risp         Int
  hits_risp            Int
  batting_average_risp Float?
  on_base_slugging     Float?
  total_bases          Int
  hit_by_pitches       Int
  ground_outs          Int
  flyouts              Int
  gidp                 Int

  runningStats PlayerRunningStatsLifetime?

  @@id(fields: [player_id])
  @@map("batting_stats_player_lifetime")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerBattingStatsPostseasonLifetime {
  player_id            String
  player_name          String
  batting_average      Float?
  on_base_percentage   Float?
  slugging             Float?
  appearances          Int
  plate_appearances    Int
  at_bats              Int
  hits                 Int
  walks                Int
  singles              Int
  doubles              Int
  triples              Int
  quadruples           Int
  home_runs            Int
  runs_batted_in       Float
  strikeouts           Int
  sacrifice_bunts      Int
  sacrifice_flies      Int
  at_bats_risp         Int
  hits_risp            Int
  batting_average_risp Float?
  on_base_slugging     Float?
  total_bases          Int
  hit_by_pitches       Int
  ground_outs          Int
  flyouts              Int
  gidp                 Int

  runningStats PlayerRunningStatsPostseasonLifetime?

  @@id(fields: [player_id])
  @@map("batting_stats_player_playoffs_lifetime")
}

// @View - Must be manually updated with every new Prisma introspection
model TeamBattingStatsSeason {
  team_id              String    @db.VarChar(36)
  team_valid_from      DateTime  @db.Timestamp(6)
  team_valid_until     DateTime? @db.Timestamp(6)
  season               Int
  batting_average      Float?
  on_base_percentage   Float?
  slugging             Float?
  appearances          Int
  plate_appearances    Int
  at_bats              Int
  hits                 Int
  walks                Int
  singles              Int
  doubles              Int
  triples              Int
  quadruples           Int
  home_runs            Int
  runs_batted_in       Float
  strikeouts           Int
  sacrifice_bunts      Int
  sacrifice_flies      Int
  at_bats_risp         Int
  hits_risp            Int
  batting_average_risp Float?
  on_base_slugging     Float?
  total_bases          Int
  hit_by_pitches       Int
  ground_outs          Int
  flyouts              Int
  gidp                 Int

  runningStats TeamRunningStatsSeason?
  team         Team                    @relation(fields: [team_id, team_valid_from], references: [team_id, valid_from])

  @@id(fields: [team_id, season])
  @@map("batting_stats_team_season")
}

// @View - Must be manually updated with every new Prisma introspection
model TeamBattingStatsPostseason {
  team_id              String    @db.VarChar(36)
  team_valid_from      DateTime  @db.Timestamp(6)
  team_valid_until     DateTime? @db.Timestamp(6)
  season               Int
  batting_average      Float?
  on_base_percentage   Float?
  slugging             Float?
  appearances          Int
  plate_appearances    Int
  at_bats              Int
  hits                 Int
  walks                Int
  singles              Int
  doubles              Int
  triples              Int
  quadruples           Int
  home_runs            Int
  runs_batted_in       Float
  strikeouts           Int
  sacrifice_bunts      Int
  sacrifice_flies      Int
  at_bats_risp         Int
  hits_risp            Int
  batting_average_risp Float?
  on_base_slugging     Float?
  total_bases          Int
  hit_by_pitches       Int
  ground_outs          Int
  flyouts              Int
  gidp                 Int

  runningStats TeamRunningStatsPostseason?
  team         Team                        @relation(fields: [team_id, team_valid_from], references: [team_id, valid_from])

  @@id(fields: [team_id, season])
  @@map("batting_stats_team_playoffs_season")
}

// Pitching Stats

// @View - Must be manually updated with every new Prisma introspection
model PlayerPitchingStatsGame {
  game_id           String
  player_id         String
  player_name       String
  season            Int
  day               Int
  team_id           String    @db.VarChar(36)
  team_valid_from   DateTime  @db.Timestamp(6)
  team_valid_until  DateTime? @db.Timestamp(6)
  wins              Int       @map("win")
  losses            Int       @map("loss")
  pitches_thrown    Int
  top_of_inning     Boolean
  batters_faced     Int
  outs_recorded     Int
  innings           Float
  runs_allowed      Float
  // shutouts            Int
  // quality_starts      Int
  strikeouts        Int
  walks             Int
  home_runs_allowed Int
  hits_allowed      Int
  hit_by_pitches    Float
  // earned_run_average  Float
  // walks_per_9         Float
  // hits_per_9          Float
  // strikeouts_per_9    Float
  // home_runs_per_9     Float
  // whip                Float
  // strikeouts_per_walk Float
  weather_id        Int

  team Team @relation(fields: [team_id, team_valid_from], references: [team_id, valid_from])

  @@id(fields: [game_id, player_id, team_id])
  @@map("pitching_stats_all_appearances")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerPitchingStatsSeason {
  player_id           String
  player_name         String
  season              Int
  team_id             String    @db.VarChar(36)
  team_valid_from     DateTime  @db.Timestamp(6)
  team_valid_until    DateTime? @db.Timestamp(6)
  games               Int
  wins                Int
  losses              Int
  win_pct             Float?
  pitches_thrown      Int
  batters_faced       Int
  outs_recorded       Int
  innings             Float
  runs_allowed        Float
  shutouts            Int
  quality_starts      Int
  strikeouts          Int
  walks               Int
  home_runs_allowed   Int
  hits_allowed        Int
  hit_by_pitches      Float
  earned_run_average  Float
  walks_per_9         Float
  hits_per_9          Float
  strikeouts_per_9    Float
  home_runs_per_9     Float
  whip                Float
  strikeouts_per_walk Float

  team Team @relation(fields: [team_id, team_valid_from], references: [team_id, valid_from])

  @@id(fields: [player_id, season, team_id])
  @@map("pitching_stats_player_season")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerPitchingStatsSeasonCombined {
  player_id           String
  player_name         String
  season              Int
  games               Int
  wins                Int
  losses              Int
  win_pct             Float?
  pitches_thrown      Int
  batters_faced       Int
  outs_recorded       Int
  innings             Float
  runs_allowed        Float
  shutouts            Int
  quality_starts      Int
  strikeouts          Int
  walks               Int
  home_runs_allowed   Int
  hits_allowed        Int
  hit_by_pitches      Float
  earned_run_average  Float
  walks_per_9         Float
  hits_per_9          Float
  strikeouts_per_9    Float
  home_runs_per_9     Float
  whip                Float
  strikeouts_per_walk Float

  @@id(fields: [player_id, season])
  @@map("pitching_stats_player_season_combined")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerPitchingStatsPostseason {
  player_id           String
  player_name         String
  season              Int
  team_id             String    @db.VarChar(36)
  team_valid_from     DateTime  @db.Timestamp(6)
  team_valid_until    DateTime? @db.Timestamp(6)
  games               Int
  wins                Int
  losses              Int
  win_pct             Float?
  pitches_thrown      Int
  batters_faced       Int
  outs_recorded       Int
  innings             Float
  runs_allowed        Float
  shutouts            Int
  quality_starts      Int
  strikeouts          Int
  walks               Int
  home_runs_allowed   Int
  hits_allowed        Int
  hit_by_pitches      Float
  earned_run_average  Float
  walks_per_9         Float
  hits_per_9          Float
  strikeouts_per_9    Float
  home_runs_per_9     Float
  whip                Float
  strikeouts_per_walk Float

  team Team @relation(fields: [team_id, team_valid_from], references: [team_id, valid_from])

  @@id(fields: [player_id, season, team_id])
  @@map("pitching_stats_player_playoffs_season")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerPitchingStatsLifetime {
  player_id           String
  player_name         String
  games               Int
  wins                Int
  losses              Int
  win_pct             Float?
  pitches_thrown      Int
  batters_faced       Int
  outs_recorded       Int
  innings             Float
  runs_allowed        Float
  shutouts            Int
  quality_starts      Int
  strikeouts          Int
  walks               Int
  home_runs_allowed   Int
  hits_allowed        Int
  hit_by_pitches      Float
  earned_run_average  Float
  walks_per_9         Float
  hits_per_9          Float
  strikeouts_per_9    Float
  home_runs_per_9     Float
  whip                Float
  strikeouts_per_walk Float

  @@id(fields: [player_id])
  @@map("pitching_stats_player_lifetime")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerPitchingStatsPostseasonLifetime {
  player_id           String
  player_name         String
  games               Int
  wins                Int
  losses              Int
  win_pct             Float?
  pitches_thrown      Int
  batters_faced       Int
  outs_recorded       Int
  innings             Float
  runs_allowed        Float
  shutouts            Int
  quality_starts      Int
  strikeouts          Int
  walks               Int
  home_runs_allowed   Int
  hits_allowed        Int
  hit_by_pitches      Float
  earned_run_average  Float
  walks_per_9         Float
  hits_per_9          Float
  strikeouts_per_9    Float
  home_runs_per_9     Float
  whip                Float
  strikeouts_per_walk Float

  @@id(fields: [player_id])
  @@map("pitching_stats_player_playoffs_lifetime")
}

// @View - Must be manually updated with every new Prisma introspection
model TeamPitchingStatsSeason {
  season              Int
  team_id             String    @db.VarChar(36)
  team_valid_from     DateTime  @db.Timestamp(6)
  team_valid_until    DateTime? @db.Timestamp(6)
  games               Int
  wins                Int
  losses              Int
  win_pct             Float?
  pitches_thrown      Int
  batters_faced       Int
  outs_recorded       Int
  innings             Float
  runs_allowed        Float
  shutouts            Int
  quality_starts      Int
  strikeouts          Int
  walks               Int
  home_runs_allowed   Int
  hits_allowed        Int
  hit_by_pitches      Float
  earned_run_average  Float
  walks_per_9         Float
  hits_per_9          Float
  strikeouts_per_9    Float
  home_runs_per_9     Float
  whip                Float
  strikeouts_per_walk Float

  team Team @relation(fields: [team_id, team_valid_from], references: [team_id, valid_from])

  @@id(fields: [team_id, season])
  @@map("pitching_stats_team_season")
}

// @View - Must be manually updated with every new Prisma introspection
model TeamPitchingStatsPostseason {
  season              Int
  team_id             String    @db.VarChar(36)
  team_valid_from     DateTime  @db.Timestamp(6)
  team_valid_until    DateTime? @db.Timestamp(6)
  games               Int
  wins                Int
  losses              Int
  win_pct             Float?
  pitches_thrown      Int
  batters_faced       Int
  outs_recorded       Int
  innings             Float
  runs_allowed        Float
  shutouts            Int
  quality_starts      Int
  strikeouts          Int
  walks               Int
  home_runs_allowed   Int
  hits_allowed        Int
  hit_by_pitches      Float
  earned_run_average  Float
  walks_per_9         Float
  hits_per_9          Float
  strikeouts_per_9    Float
  home_runs_per_9     Float
  whip                Float
  strikeouts_per_walk Float

  team Team @relation(fields: [team_id, team_valid_from], references: [team_id, valid_from])

  @@id(fields: [team_id, season])
  @@map("pitching_stats_team_playoffs_season")
}

// Base Running Stats

// // @View - Must be manually updated with every new Prisma introspection
model PlayerRunningStatsGame {
  game_id          String
  player_id        String
  player_name      String
  team             String?
  team_id          String    @db.VarChar(36)
  team_valid_from  DateTime  @db.Timestamp(6)
  team_valid_until DateTime? @db.Timestamp(6)
  season           Int
  day              Int
  stolen_bases     Int
  caught_stealing  Int
  runs             Float

  battingStats PlayerBattingStatsGame @relation(fields: [game_id, player_id, team_id], references: [game_id, player_id, team_id])

  @@id(fields: [game_id, player_id, team_id])
  @@map("running_stats_player_single_game")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerRunningStatsSeason {
  player_id        String
  player_name      String
  team             String?
  team_id          String    @db.VarChar(36)
  team_valid_from  DateTime  @db.Timestamp(6)
  team_valid_until DateTime? @db.Timestamp(6)
  season           Int
  stolen_bases     Int
  caught_stealing  Int
  runs             Float

  battingStats PlayerBattingStatsSeason @relation(fields: [player_id, season, team_id], references: [player_id, season, team_id])

  @@id(fields: [player_id, season, team_id])
  @@map("running_stats_player_season")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerRunningStatsSeasonCombined {
  player_id       String
  player_name     String
  season          Int
  stolen_bases    Int
  caught_stealing Int
  runs            Float

  battingStats PlayerBattingStatsSeasonCombined @relation(fields: [player_id, season], references: [player_id, season])

  @@id(fields: [player_id, season])
  @@map("running_stats_player_season_combined")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerRunningStatsPostseason {
  player_id        String
  player_name      String
  team             String?
  team_id          String    @db.VarChar(36)
  team_valid_from  DateTime  @db.Timestamp(6)
  team_valid_until DateTime? @db.Timestamp(6)
  season           Int
  stolen_bases     Int
  caught_stealing  Int
  runs             Float

  battingStats PlayerBattingStatsPostseason @relation(fields: [player_id, season, team_id], references: [player_id, season, team_id])

  @@id(fields: [player_id, season, team_id])
  @@map("running_stats_player_playoffs_season")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerRunningStatsLifetime {
  player_id       String
  player_name     String
  stolen_bases    Int
  caught_stealing Int
  runs            Float

  battingStats PlayerBattingStatsLifetime @relation(fields: [player_id], references: [player_id])

  @@id(fields: [player_id])
  @@map("running_stats_player_lifetime")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerRunningStatsPostseasonLifetime {
  player_id       String
  player_name     String
  stolen_bases    Int
  caught_stealing Int
  runs            Float

  battingStats PlayerBattingStatsPostseasonLifetime @relation(fields: [player_id], references: [player_id])

  @@id(fields: [player_id])
  @@map("running_stats_player_playoffs_lifetime")
}

// @View - Must be manually updated with every new Prisma introspection
model TeamRunningStatsSeason {
  team            String?
  team_id         String  @db.VarChar(36)
  season          Int
  stolen_bases    Int
  caught_stealing Int
  runs            Float

  battingStats TeamBattingStatsSeason @relation(fields: [team_id, season], references: [team_id, season])

  @@id(fields: [team_id, season])
  @@map("running_stats_team_season")
}

// @View - Must be manually updated with every new Prisma introspection
model TeamRunningStatsPostseason {
  team            String?
  team_id         String  @db.VarChar(36)
  season          Int
  stolen_bases    Int
  caught_stealing Int
  runs            Float

  battingStats TeamBattingStatsPostseason @relation(fields: [team_id, season], references: [team_id, season])

  @@id(fields: [team_id, season])
  @@map("running_stats_team_playoffs_season")
}

// Leaderboards

// @View - Must be manually updated with every new Prisma introspection
model PlayerBattingLeaderboardsLifetime {
  player_id   String
  player_name String
  url_slug    String
  value       Float
  rank        Int
  stat        String

  @@id(fields: [player_id])
  @@map("ref_leaderboard_lifetime_batting")
}

// @View - Must be manually updated with every new Prisma introspection
model PlayerPitchingLeaderboardsLifetime {
  player_id   String
  player_name String
  url_slug    String
  value       Float
  rank        Int
  stat        String

  @@id(fields: [player_id])
  @@map("ref_leaderboard_lifetime_pitching")
}
